import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import whisper from 'whisper-node';
import mic from 'mic';

const SAMPLE_RATE = 16000;
const RECORD_SECONDS = 2; // –ë—ã—Å—Ç—Ä–∞—è –ø–æ—Ä—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã

@Injectable()
export class SpeechService implements OnModuleInit, OnModuleDestroy {
  private recognizedTexts: string[] = [];
  private micInstance;
  private micInputStream;
  private audioChunks: Buffer[] = [];
  private recordTimeout: NodeJS.Timeout | null = null;
  private isProcessing = false;

  async onModuleInit() {
    this.micInstance = mic({
      rate: String(SAMPLE_RATE),
      channels: '1',
      debug: false,
      fileType: 'wav', // whisper –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å wav
    });

    this.micInputStream = this.micInstance.getAudioStream();

    this.micInputStream.on('data', (data: Buffer) => {
      this.audioChunks.push(data);

      if (!this.recordTimeout) {
        this.recordTimeout = setTimeout(
          () => this.processAudio(),
          RECORD_SECONDS * 1000,
        );
      }
    });

    this.micInputStream.on('error', (err: Error) => {
      console.error('üé§ Mic error:', err);
    });

    this.micInstance.start();
    console.log('üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç...');
  }

  async processAudio() {
    if (this.recordTimeout) {
      clearTimeout(this.recordTimeout);
      this.recordTimeout = null;
    }

    if (this.isProcessing) {
      // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ü–∏–∫–ª
      return;
    }

    if (this.audioChunks.length === 0) {
      return;
    }

    this.isProcessing = true;

    try {
      const audioBuffer = Buffer.concat(this.audioChunks);
      this.audioChunks = [];

      console.log(`üîä –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä–∞: ${audioBuffer.length} –±–∞–π—Ç`);

      if (audioBuffer.length < 10000) {
        console.log('‚ö†Ô∏è –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é');
        this.isProcessing = false;
        return;
      }

      const fs = await import('fs/promises');
      const os = await import('os');
      const path = await import('path');

      const tmpDir = os.tmpdir();
      const tmpFilePath = path.join(tmpDir, `mic_record_${Date.now()}.wav`);

      await fs.writeFile(tmpFilePath, audioBuffer);

      const options = {
        modelName: 'base.en',
        whisperOptions: {
          language: 'auto',
          gen_file_txt: false,
          gen_file_subtitle: false,
          gen_file_vtt: false,
          word_timestamps: true,
        },
      };

      console.log(`üïê –ó–∞–ø—É—Å–∫–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ñ–∞–π–ª–∞ ${tmpFilePath}...`);

      try {
        const transcript = await whisper(tmpFilePath, options);

        console.log('test-transcript', transcript);
        if (!transcript || !transcript.text) {
          console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏');
        } else {
          console.log('\n=== –†–ê–°–ü–û–ó–ù–ê–ù–ù–´–ô –¢–ï–ö–°–¢ ===');
          console.log(transcript.text);
          console.log('=========================\n');
          this.recognizedTexts.push(transcript.text);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ whisper:', error);
      }

      await fs.unlink(tmpFilePath);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ whisper:', e);
    } finally {
      this.isProcessing = false;
    }
  }

  getRecognizedTexts() {
    const copy = [...this.recognizedTexts];
    this.recognizedTexts = [];
    return copy;
  }

  async onModuleDestroy() {
    if (this.micInstance) {
      this.micInstance.stop();
    }
  }

  // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  create(createSpeechDto: any) {
    return { message: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ' };
  }
  findAll() {
    return { message: '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ' };
  }
  findOne(id: number) {
    return { message: `–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ id=${id} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ` };
  }
  update(id: number, updateSpeechDto: any) {
    return { message: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ id=${id} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ` };
  }
  remove(id: number) {
    return { message: `–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ id=${id} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ` };
  }
}
