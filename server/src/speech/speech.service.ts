import { Injectable, OnModuleInit } from '@nestjs/common';
import fs from 'fs';
import path from 'path';

@Injectable()
export class SpeechService implements OnModuleInit {
  private recognizedTexts: string[] = [];

  async onModuleInit() {
    const testFilePath = path.resolve(process.cwd(), 'src', 'testFiles', 'harvard.wav');

    console.log(`üéß –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ñ–∞–π–ª–∞: ${testFilePath}`);
  
    if (!fs.existsSync(testFilePath)) {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${testFilePath}`);
      return;
    }
  
    console.log(`üéß –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ñ–∞–π–ª–∞: ${testFilePath}`);
  
    try {
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
      const testText = "This is a test transcription from the Harvard audio file. The system is working correctly.";
  
      console.log('\n=== –†–ê–°–ü–û–ó–ù–ê–ù–ù–´–ô –¢–ï–ö–°–¢ ===');
      console.log(testText);
      console.log('=========================\n');
  
      this.recognizedTexts.push(testText);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', err);
    }
  }

  getRecognizedTexts() {
    const copy = [...this.recognizedTexts];
    this.recognizedTexts = [];
    return copy;
  }

  // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞

  create(createSpeechDto: any) {
    return {
      message: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–µ—á–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ',
      body: createSpeechDto,
    };
  }

  findAll() {
    return {
      message: '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ',
    };
  }

  findOne(id: number) {
    return {
      message: `–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–µ—á–∏ —Å id=${id} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ`,
    };
  }

  update(id: number, updateSpeechDto: any) {
    return {
      message: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–µ—á–∏ —Å id=${id} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ`,
      body: updateSpeechDto,
    };
  }

  remove(id: number) {
    return {
      message: `–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–µ—á–∏ —Å id=${id} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ`,
    };
  }
}
